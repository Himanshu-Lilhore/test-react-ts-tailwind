import { useEffect, useRef, useState } from "react";

// All path "d" attributes from your SVG
const pathsData = [
    "M30.7548 12.5078C30.7548 10.6558 30.0139 9.72908 28.532 9.72773C27.1409 9.72773 26.4461 10.6544 26.4474 12.5078V18.5439C26.4469 18.7863 26.3502 19.0185 26.1786 19.1897C26.0071 19.3609 25.7746 19.4571 25.5322 19.4571H23.1914C22.9491 19.4571 22.7166 19.3609 22.545 19.1897C22.3734 19.0185 22.2768 18.7863 22.2762 18.5439V12.5078C22.2762 10.6558 21.6743 9.72908 20.4703 9.72773C19.3599 9.72773 18.5722 10.1914 18.1071 11.1188V18.5439C18.1071 18.7861 18.0109 19.0183 17.8397 19.1896C17.6684 19.3608 17.4362 19.4571 17.194 19.4571H14.8532C14.7331 19.4573 14.6141 19.4339 14.5031 19.3881C14.3921 19.3424 14.2912 19.2751 14.2062 19.1903C14.1212 19.1055 14.0537 19.0047 14.0077 18.8938C13.9617 18.7829 13.938 18.664 13.938 18.5439V6.47174C13.938 6.35165 13.9617 6.23274 14.0077 6.12182C14.0537 6.0109 14.1212 5.91015 14.2062 5.82533C14.2912 5.74051 14.3921 5.67329 14.5031 5.62752C14.6141 5.58175 14.7331 5.55833 14.8532 5.5586H17.194C17.4362 5.5586 17.6684 5.6548 17.8397 5.82605C18.0109 5.9973 18.1071 6.22956 18.1071 6.47174V6.94763C19.0345 6.02296 20.0514 5.55995 21.1577 5.5586C22.481 5.5586 23.5466 6.12872 24.3547 7.26896C25.1506 6.12736 26.5864 5.55724 28.6621 5.5586C32.8313 5.5586 34.9158 7.875 34.9158 12.5078V18.5439C34.9158 18.6638 34.8922 18.7826 34.8463 18.8934C34.8004 19.0041 34.7332 19.1048 34.6484 19.1896C34.5636 19.2744 34.4629 19.3416 34.3521 19.3875C34.2413 19.4334 34.1226 19.4571 34.0027 19.4571H31.668C31.4258 19.4571 31.1935 19.3608 31.0223 19.1896C30.851 19.0183 30.7548 18.7861 30.7548 18.5439V12.5078Z",
    "M44.7917 5.55816C48.4972 5.55816 50.3499 7.87457 50.3499 12.5074C50.3499 17.1402 48.4972 19.4566 44.7917 19.4566C44.1481 19.4744 43.5077 19.3601 42.9099 19.1209C42.3121 18.8816 41.7697 18.5225 41.3161 18.0656V18.2425C41.3161 18.5661 41.1875 18.8765 40.9587 19.1053C40.7299 19.3342 40.4195 19.4627 40.0959 19.4627H38.2513C37.9584 19.4627 37.6775 19.3464 37.4704 19.1393C37.2633 18.9322 37.147 18.6513 37.147 18.3584V1.10228C37.1475 0.809751 37.2641 0.529387 37.4711 0.322728C37.6782 0.116069 37.9588 -4.96065e-07 38.2513 0H40.104C40.4276 0 40.738 0.128559 40.9668 0.357397C41.1957 0.586235 41.3242 0.896607 41.3242 1.22023V6.95533C41.7766 6.4986 42.3175 6.13909 42.9138 5.89884C43.51 5.65859 44.1491 5.54266 44.7917 5.55816ZM46.1808 12.5074C46.1808 10.6553 45.4859 9.72865 44.0962 9.72729C42.7065 9.72594 41.7798 10.1896 41.3161 11.1184V13.8964C41.7798 14.8238 42.7065 15.2875 44.0962 15.2875C45.4859 15.2875 46.1808 14.3608 46.1808 12.5074Z",
    "M56.7436 0.936325V3.24053C56.7436 3.4881 56.6452 3.72554 56.4702 3.9006C56.2951 4.07566 56.0577 4.17401 55.8101 4.17401H53.5059C53.3834 4.17401 53.2621 4.14985 53.149 4.10291C53.0358 4.05597 52.9331 3.98718 52.8466 3.90048C52.76 3.81377 52.6915 3.71085 52.6448 3.5976C52.5981 3.48436 52.5742 3.36302 52.5745 3.24053V0.936325C52.5745 0.68929 52.6726 0.452372 52.8473 0.277692C53.022 0.103013 53.2589 0.00488281 53.5059 0.00488281H55.8101C56.0573 0.00488223 56.2945 0.102947 56.4695 0.277568C56.6445 0.45219 56.7431 0.689103 56.7436 0.936325ZM52.5684 18.524V6.49245C52.5684 6.24523 52.6664 6.0081 52.8411 5.8331C53.0157 5.6581 53.2526 5.55951 53.4998 5.55898H55.804C56.0514 5.55951 56.2885 5.65803 56.4635 5.83298C56.6384 6.00792 56.737 6.24504 56.7375 6.49245V18.524C56.737 18.7714 56.6384 19.0085 56.4635 19.1834C56.2885 19.3584 56.0514 19.4569 55.804 19.4574H53.5059C53.383 19.458 53.2612 19.4342 53.1474 19.3875C53.0337 19.3409 52.9303 19.2722 52.8432 19.1855C52.7561 19.0987 52.687 18.9956 52.6398 18.8821C52.5926 18.7686 52.5684 18.6469 52.5684 18.524Z",
    "M89.2892 12.5078C89.2892 17.1406 87.204 19.457 83.0335 19.457C78.863 19.457 76.7784 17.1406 76.7798 12.5078C76.7798 7.875 78.8644 5.55859 83.0335 5.55859C87.2026 5.55859 89.2879 7.875 89.2892 12.5078ZM83.0335 15.2879C84.4245 15.2879 85.1201 14.3612 85.1201 12.5078C85.1201 10.6544 84.4245 9.72772 83.0335 9.72772C81.6451 9.72772 80.951 10.6544 80.951 12.5078C80.951 14.3612 81.6451 15.2879 83.0335 15.2879Z",
    "M67.7447 14.7311C67.0193 15.1205 66.2044 15.3126 65.3815 15.2884C64.1796 15.2884 63.5755 14.8227 63.5755 13.8993V9.72819H67.7467V5.55702H63.5735V0.00292969L59.4023 1.38993V13.8993C59.4023 17.6048 61.3947 19.4568 65.3794 19.4555C66.3068 19.4555 67.3237 19.1809 68.4402 18.6237L67.7447 14.7311Z",
    "M75.2365 0.936327V3.24053C75.2368 3.36302 75.2129 3.48436 75.1662 3.59761C75.1195 3.71085 75.0509 3.81377 74.9644 3.90048C74.8779 3.98719 74.7751 4.05598 74.662 4.10291C74.5489 4.14985 74.4276 4.17402 74.3051 4.17402H72.0009C71.8782 4.17428 71.7567 4.15032 71.6433 4.1035C71.5299 4.05669 71.4269 3.98793 71.3402 3.9012C71.2535 3.81446 71.1847 3.71145 71.1379 3.59808C71.0911 3.4847 71.0671 3.36319 71.0674 3.24053V0.936327C71.0674 0.813837 71.0915 0.692549 71.1385 0.579408C71.1854 0.466267 71.2542 0.363494 71.3409 0.276975C71.4276 0.190456 71.5306 0.121887 71.6438 0.0751976C71.757 0.0285079 71.8784 0.00461759 72.0009 0.00488503H74.3051C74.5521 0.00488503 74.789 0.103015 74.9637 0.277695C75.1384 0.452374 75.2365 0.689292 75.2365 0.936327ZM71.0755 18.524V6.49246C71.0755 6.24488 71.1739 6.00745 71.3489 5.83238C71.524 5.65732 71.7614 5.55898 72.009 5.55898H74.3132C74.5604 5.55952 74.7973 5.6581 74.972 5.8331C75.1466 6.00811 75.2447 6.24523 75.2447 6.49246V18.524C75.2447 18.7712 75.1466 19.0083 74.972 19.1833C74.7973 19.3583 74.5604 19.4569 74.3132 19.4574H72.0009C71.7547 19.4553 71.5194 19.356 71.346 19.1812C71.1727 19.0063 71.0755 18.7701 71.0755 18.524Z",
    "M94.0666 14.3584H91.7645C91.6418 14.3584 91.5203 14.3826 91.4071 14.4297C91.2938 14.4767 91.1909 14.5457 91.1044 14.6326C91.0178 14.7196 90.9493 14.8227 90.9027 14.9362C90.8562 15.0497 90.8325 15.1713 90.833 15.2939V17.5961C90.8327 17.7186 90.8566 17.8399 90.9033 17.9532C90.95 18.0664 91.0186 18.1693 91.1051 18.256C91.1916 18.3427 91.2944 18.4115 91.4075 18.4585C91.5207 18.5054 91.642 18.5296 91.7645 18.5296H94.0666C94.1893 18.5298 94.3108 18.5059 94.4242 18.4591C94.5376 18.4122 94.6406 18.3435 94.7273 18.2567C94.814 18.17 94.8828 18.067 94.9296 17.9536C94.9764 17.8403 95.0004 17.7187 95.0001 17.5961V15.2959C95.0006 15.173 94.9769 15.0512 94.9302 14.9375C94.8836 14.8237 94.8149 14.7204 94.7281 14.6332C94.6414 14.5461 94.5383 14.477 94.4248 14.4298C94.3113 14.3827 94.1896 14.3584 94.0666 14.3584Z",
    "M3.70226 16.1741C2.58311 16.5171 1.4392 16.7734 0.280677 16.9408C0.0656544 16.3446 -0.0274208 15.7113 0.00697413 15.0785C0.041369 14.4457 0.202533 13.8262 0.480904 13.2569C0.516387 13.1821 0.555671 13.1086 0.596223 13.0351C0.657052 12.9261 0.722949 12.8197 0.791381 12.7158C0.906306 12.5435 1.03335 12.3796 1.17156 12.2253C1.22732 12.1632 1.28434 12.0986 1.34517 12.0454C1.73915 11.6593 2.21152 11.3624 2.73028 11.1748C3.55465 10.8991 4.40736 10.7167 5.27239 10.6311L5.74761 10.5754L6.45601 10.4993C6.54764 10.4901 6.63863 10.4753 6.72847 10.455C6.89951 10.4281 7.05301 10.3347 7.15553 10.1952C7.16884 10.1754 7.1807 10.1546 7.19102 10.1331L7.20622 10.0989C7.22523 10.0488 7.23965 9.99701 7.24931 9.94428C7.26768 9.82865 7.27489 9.71152 7.27085 9.59452C7.27085 9.53749 7.27085 9.48046 7.27085 9.42597C7.26325 9.26123 7.24931 9.10662 7.2303 8.96216C7.21166 8.82688 7.18543 8.69276 7.15173 8.56044C6.94517 7.77727 6.46995 7.4047 5.63103 7.38823C5.3272 7.38732 5.02407 7.41704 4.72621 7.47693C4.3587 7.54663 3.99373 7.64041 3.63256 7.74686C3.45261 7.80008 3.27266 7.85711 3.09398 7.91667C2.9153 7.97623 2.73788 8.03706 2.56047 8.09915C2.45811 8.13793 2.35122 8.16348 2.24239 8.17519C2.21959 8.17642 2.19675 8.17642 2.17396 8.17519C2.13121 8.17469 2.08868 8.16916 2.04723 8.15871C1.94754 8.13127 1.86086 8.06929 1.80265 7.98384C1.74503 7.89457 1.70223 7.79657 1.67592 7.69363C1.63791 7.56691 1.58975 7.44018 1.5492 7.31346C1.53399 7.27037 1.51879 7.22728 1.50485 7.18673C1.43008 6.95356 1.36671 6.75333 1.32109 6.58099C1.30251 6.51255 1.28603 6.44792 1.27167 6.3871C1.27167 6.35668 1.26027 6.32753 1.25393 6.29839C1.22893 6.17885 1.22252 6.05617 1.23492 5.93468C1.24043 5.89571 1.2502 5.85747 1.26407 5.82063C1.27728 5.78449 1.29472 5.75003 1.31602 5.71799C1.35165 5.66961 1.39437 5.62688 1.44275 5.59126C1.64678 5.42778 2.01048 5.3074 2.58328 5.14012C2.99581 5.02064 3.41411 4.92209 3.83659 4.84485L3.99373 4.81697C4.15214 4.79035 4.30928 4.76754 4.46769 4.74727L4.62609 4.72952C4.99598 4.68877 5.36788 4.66888 5.74001 4.66996C5.89842 4.66996 6.05936 4.66997 6.21903 4.68391C6.70497 4.71124 7.18777 4.77907 7.66243 4.88667C8.10091 4.98216 8.52056 5.14959 8.90434 5.38216C8.98545 5.43159 9.06275 5.48354 9.13878 5.5393C9.39967 5.72905 9.63075 5.95671 9.82437 6.21475C10.2239 6.76032 10.4484 7.41434 10.4681 8.09029C10.4947 8.67829 10.5074 9.26883 10.5138 9.8581C10.5198 10.4192 10.3564 10.9691 10.0449 11.4358C9.41697 12.3586 8.66085 13.1873 7.7993 13.8968C6.58568 14.902 5.19665 15.6741 3.70226 16.1741Z",
    "M11.1939 18.26C11.1939 18.2803 11.1939 18.3005 11.1875 18.3195C11.1816 18.3573 11.1714 18.3943 11.1571 18.4298C11.1281 18.5004 11.0819 18.5627 11.0228 18.611C10.9892 18.6387 10.9531 18.6633 10.9151 18.6845C10.8709 18.7098 10.8247 18.7314 10.7769 18.7491L10.4158 18.8936C10.0559 19.0419 9.69723 19.1901 9.33353 19.3283C8.46293 19.6578 8.37169 19.6121 8.01812 18.7263C8.00952 18.7041 7.99935 18.6825 7.98771 18.6617C7.92259 18.5457 7.81907 18.4561 7.69497 18.4083C7.61417 18.3777 7.52775 18.3647 7.44152 18.3702C7.39844 18.3738 7.35592 18.3823 7.3148 18.3956C7.29319 18.4023 7.27203 18.4103 7.25143 18.4197C7.2091 18.4391 7.16913 18.4633 7.13231 18.4919L7.06388 18.5464C6.99672 18.5996 6.92955 18.6528 6.86112 18.7035C6.751 18.7892 6.6359 18.8684 6.51643 18.9405C6.39734 19.0129 6.27421 19.0785 6.14766 19.1369C5.9573 19.2257 5.76027 19.2995 5.55838 19.3574C5.22006 19.4563 4.87128 19.515 4.51923 19.5323L4.30633 19.5399C4.02322 19.5421 3.74044 19.52 3.46108 19.474C3.39138 19.4626 3.32168 19.4487 3.25325 19.4347C3.11511 19.4056 2.97952 19.3701 2.84519 19.3295C2.71086 19.289 2.58033 19.2408 2.45107 19.1876C2.32141 19.1359 2.19451 19.0776 2.0709 19.0127C1.58535 18.7616 1.16194 18.4053 0.831523 17.9698C0.682256 17.7681 0.551214 17.5535 0.439941 17.3286C2.08737 17.9356 4.2265 18.5958 6.01586 17.9951C7.53656 17.4882 9.1954 16.3718 10.6097 15.0107C10.6287 15.2262 10.6553 15.4416 10.6882 15.657C10.7503 16.0676 10.8314 16.477 10.9201 16.885C10.9949 17.2234 11.0747 17.5617 11.1533 17.8988C11.1724 17.9755 11.186 18.0534 11.1939 18.132C11.1967 18.1746 11.1967 18.2174 11.1939 18.26Z",
    "M10.5681 14.2808C10.5579 14.0476 10.5389 13.8575 10.5465 13.6674C10.5465 13.6028 10.615 13.5407 10.6619 13.4761C11.0686 12.9692 11.478 12.456 11.8721 11.93C11.848 11.949 11.8214 11.9668 11.7986 11.9883C11.2917 12.4712 10.7848 12.9527 10.2779 13.4393C10.2485 13.4729 10.2096 13.4967 10.1664 13.5076C10.1231 13.5184 10.0776 13.5158 10.0358 13.5002C9.70128 13.4077 9.36166 13.3266 9.00049 13.2353L12.4411 11.2559C12.2535 12.1848 12.0723 13.0832 11.8873 13.9919C11.6123 13.9184 11.3538 13.8525 11.0965 13.7764C11.0603 13.7592 11.0188 13.7569 10.9809 13.77C10.943 13.783 10.9118 13.8103 10.8938 13.8461C10.7975 13.9843 10.6935 14.1135 10.5681 14.2808Z",
    "M0.76709 17.1461C0.76709 17.1461 5.9717 18.2688 10.0117 14.0273C10.0066 14.0273 7.05014 19.2079 0.76709 17.1461Z",
];

export default function AmbitioSvgAni() {
    const [progress, setProgress] = useState(0);
    const lastUpdateTime = useRef(Date.now());
    const [lengths, setLengths] = useState(Array(pathsData.length).fill(1));
    const pathRefs = useRef<(SVGPathElement | null)[]>([]);
    const [manualControl, setManualControl] = useState(false);
    const progressVariable = 0.02;
    const timeBwFrames = 41; // 41ms for 24fps
    const pauseTime = 1500; // 2 sec

    useEffect(() => {
        const newLengths = pathRefs.current.map((ref) => ref?.getTotalLength() || 1);
        setLengths(newLengths);
    }, []);

    useEffect(() => {
        let frameId: number | null = null;
        let timeoutId: ReturnType<typeof setTimeout> | null = null;

        const tickReverse = () => {
            if (manualControl) return;
            const currTime = Date.now();
            let isCompleted = false;
            if (currTime - lastUpdateTime.current > timeBwFrames) {
                setProgress((prev) => {
                    if (prev === 0) isCompleted = true;
                    return prev > 0 ? Math.max(0, prev - progressVariable) : 0;
                });
                lastUpdateTime.current = currTime;
            }
            if (!isCompleted) frameId = requestAnimationFrame(tickReverse);
            else {
                pause(false);
            }
        };
        const pause = (rev: boolean) => {
            timeoutId = setTimeout(() => {
                if (manualControl) return;
                if (rev) frameId = requestAnimationFrame(tickReverse);
                else frameId = requestAnimationFrame(tick);
            }, pauseTime);
        };
        const tick = () => {
            if (manualControl) return;
            const currTime = Date.now();
            let isCompleted = false;
            if (currTime - lastUpdateTime.current > timeBwFrames) {
                setProgress((prev) => {
                    if (prev === 1) isCompleted = true;
                    return prev < 1 ? Math.min(1, prev + progressVariable) : 1;
                });
                lastUpdateTime.current = currTime;
            }
            if (!isCompleted) frameId = requestAnimationFrame(tick);
            else {
                pause(true);
            }
        };

        if (!manualControl) {
            frameId = requestAnimationFrame(tick);
        }

        return () => {
            if (frameId != null) cancelAnimationFrame(frameId);
            if (timeoutId != null) clearTimeout(timeoutId);
        };
    }, [manualControl]);

    const paths = pathsData.map((d, i) => (
        <path
            key={i}
            ref={(el) => {
                pathRefs.current[i] = el;
            }}
            d={d}
            stroke="#B1060F"
            strokeWidth="0.7"
            strokeLinecap="round"
            strokeLinejoin="round"
            fill="none"
            strokeDasharray={lengths[i]}
            strokeDashoffset={lengths[i] - lengths[i] * progress}
        />
    ));

    return (
        <>
            {/* SVG  */}
            <svg viewBox="-2 -2 99 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                {paths}
            </svg>

            {/* Controls  */}
            <div className="mt-[28vw] flex gap-3 bg-black">
                <input
                    type="checkbox"
                    checked={manualControl}
                    onChange={() => setManualControl((prev) => !prev)}
                    className="opacity-80"
                />{" "}
                <input
                    type="range"
                    min={0}
                    max={1}
                    step={0.01}
                    value={progress}
                    onChange={(e) => setProgress(parseFloat(e.target.value))}
                    className="w-full grow opacity-50 hover:opacity-75"
                />
                <div className="text-gray-300 opacity-80">{(progress * 100).toFixed(0)}%</div>
            </div>
        </>
    );
}
